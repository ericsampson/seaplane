name: Pull Request CI Workflow

on:
  workflow_call:
    inputs:
      manifest_path:
        type: string
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  test-linux-x64:
    name: Tests Linux x64
    strategy:
      matrix:
        features: ["--no-default-features", "", "--features unstable"]
    runs-on: [self-hosted, linux, x64]
    container: rust:slim
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal

    - uses: Swatinem/rust-cache@v1

    - name: Install Build Deps (Linux)
      run: apt-get update && apt-get install -y git libssl-dev pkg-config

    - name: Build
      run: cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }} --no-run

    - name: Test
      run: cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }}

  test-linux-aarch64:
    name: Tests Linux arm64
    strategy:
      matrix:
        features: ["--no-default-features", "", "--features unstable"]
    runs-on: [self-hosted, linux, arm64]
    container: rust:slim
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal

    - uses: Swatinem/rust-cache@v1

    - name: Install Build Deps (Linux)
      run: apt-get update && apt-get install -y git libssl-dev pkg-config

    - name: Build
      run: cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }} --no-run

    - name: Test
      run: cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }}

  test-win-macos-x64:
    name: Tests (Mac/Win) x64
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        features: ["--no-default-features", ""]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal

    - uses: Swatinem/rust-cache@v1

    - name: Build
      run: cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }} --no-run

    - name: Test
      run: cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }}

  # TODO: when M1 Runner is ready
  # test-macos-aarch64:
  #   name: Tests
  #   strategy:
  #     matrix:
  #       features: ["--no-default-features", "", "--features unstable"]
  #   runs-on: [self-hosted, macOS, arm64]
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3
  #   - uses: Swatinem/rust-cache@v1
  #   - name: Build
  #     run: ${HOME}/.cargo/bin/cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }} --no-run
  #     shell: bash
  #   - name: Test
  #     run: ${HOME}/.cargo/bin/cargo test ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }}
  #     shell: bash

  # docs:
  #   name: Docs
  #   strategy:
  #     matrix:
  #       os: [windows-latest, macos-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   - name: Install Rust
  #     uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #       profile: minimal

  #   - uses: Swatinem/rust-cache@v1

  #   - name: Check documentation
  #     env:
  #       RUSTDOCFLAGS: -D warnings
  #     run: cargo doc --manifest-path ${{ inputs.manifest_path }} --all-features --no-deps --document-private-items

  docs-self-hosted:
    name: Docs
    strategy:
      matrix:
        # TODO: when M1 runner is ready
        # os: [[self-hosted, linux, arm64], [self-hosted, linux, x64], [self-hosted, macOS, arm64]]
        os: [[self-hosted, linux, arm64], [self-hosted, linux, x64]]
    runs-on: ${{ matrix.os }}
    container: rust:slim
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal

    - uses: Swatinem/rust-cache@v1

    - name: Install Build Deps (Linux)
      run: apt-get update && apt-get install -y git libssl-dev pkg-config

    - name: Check documentation
      env:
        RUSTDOCFLAGS: -D warnings
      run: cargo doc --manifest-path ${{ inputs.manifest_path }} --all-features --no-deps --document-private-items

  rustfmt:
    name: rustfmt
    runs-on: [self-hosted, linux, x64]
    container: rust:slim
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - uses: Swatinem/rust-cache@v1

    - name: Install Build Deps (Linux)
      run: apt-get update && apt-get install -y git libssl-dev pkg-config

    - name: Install rustfmt
      run: rustup component add rustfmt

    - name: Check formatting
      run: cargo fmt --all --manifest-path ${{ inputs.manifest_path }} -- --check

  clippy:
    name: clippy
    strategy:
      matrix:
        build: [minimal, default, next]
        rust: [stable, nightly]
        include:
        - build: minimal
          features: "--no-default-features"
        - build: default
          features: ""
        - build: next
          features: "--features unstable"
    continue-on-error: ${{ matrix.rust != 'stable' }}
    runs-on: [self-hosted, linux, x64]
    container: rust:slim
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - uses: Swatinem/rust-cache@v1

    - name: Install Build Deps (Linux)
      run: apt-get update && apt-get install -y git libssl-dev pkg-config

    - name: Install Clippy
      run: rustup component add clippy

    - name: Lint (${{ matrix.build }})
      run: cargo clippy ${{ matrix.features }} --manifest-path ${{ inputs.manifest_path }} -- -D warnings
