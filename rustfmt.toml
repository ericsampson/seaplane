###
#
# NOTE: Some of the format rules listed below require a Nightly Rust compiler
# however the rules listed here are only the ones for which we changed the
# default value. A full and complete list of all format rules, including those
# that require a Nightly compiler can be found at:
#
# https://rust-lang.github.io/rustfmt/?version=master&search=
#
##

# Maximum width of a chain to fit on one line.
#
# Default value: 60
# Possible values: any positive integer that is less than or equal to the value specified for max_width
# Stable: Yes
# By default this option is set as a percentage of max_width provided by
# use_small_heuristics, but a value set directly for chain_width will take
# precedence.
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#chain_width
#
# NOTE: We are using the default becuase we are overriding our
# use_small_heuristics option down below
chain_width = 60

# Maximum length of comments. No effect unlesswrap_comments = true.
#
# Default value: 80
# Possible values: any positive integer
# Stable: No (tracking issue: #3349)
# Note: A value of 0 results in wrap_comments being applied regardless of a line's width.
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#comment_width
comment_width = 100

# Specifies which edition is used by the parser.
#
# Default value: "2015"
# Possible values: "2015", "2018", "2021"
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#edition
#
# NOTE: Rustfmt is able to pick up the edition used by reading the Cargo.toml
# file if executed through the Cargo's formatting tool cargo fmt. Otherwise,
# the edition needs to be specified in your config file:
edition = "2021"

# Error if Rustfmt is unable to get all lines within max_width, except for
# comments and string literals. If this happens, then it is a bug in Rustfmt.
# You might be able to work around the bug by refactoring your code to avoid
# long/complex expressions, usually by extracting a local variable or using a
# shorter name.
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#error_on_line_overflow
error_on_line_overflow = true

# Put single-expression functions on a single line
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#fn_single_line
fn_single_line = true

# Format code snippet included in doc comments.
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#format_code_in_doc_comments
format_code_in_doc_comments = true

# Format the metavariable matching patterns in macros.
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#format_macro_matchers
format_macro_matchers = true

# Control the case of the letters in hexadecimal literal values
#
# Default value: Preserve
# Possible values: Preserve, Upper, Lower
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#hex_literal_case
hex_literal_case = "Upper"

# How imports should be grouped into use statements. Imports will be merged or
# split to the configured level of granularity.
#
# Default value: Preserve
# Possible values: Preserve, Crate, Module, Item, One
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#imports_granularity
imports_granularity = "Crate"

# Convert /* */ comments to // comments where possible
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#normalize_comments
normalize_comments = true

# Convert #![doc] and #[doc] attributes to //! and /// doc comments.
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#normalize_doc_attributes
normalize_doc_attributes = true

# Controls the strategy for how imports are grouped together.
#
# Default value: Preserve
# Possible values: Preserve, StdExternalCrate
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#group_imports
group_imports = "StdExternalCrate"

# Use field initialize shorthand if possible.
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#use_field_init_shorthand
use_field_init_shorthand = true

# This option can be used to simplify the management and bulk updates of the
# granular width configuration settings (fn_call_width, attr_fn_like_width,
# struct_lit_width, struct_variant_width, array_width, chain_width,
# single_line_if_else_max_width), that respectively control when formatted
# constructs are multi-lined/vertical based on width.
#
# Note that explicitly provided values for the width configuration settings
# take precedence and override the calculated values determined by
# use_small_heuristics.
#
# Default value: "Default"
# Possible values: "Default", "Off", "Max"
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#use_small_heuristics
use_small_heuristics = "Max"

# Replace uses of the try! macro by the ? shorthand
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#use_try_shorthand
use_try_shorthand = true

# Break comments to fit on the line
#
# Default value: false
# https://rust-lang.github.io/rustfmt/?version=v1.4.38&search=#wrap_comments
wrap_comments = true
